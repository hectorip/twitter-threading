thread:
    tweets:
      - text: |
          Ahora hablemos acerca de los algoritmos de hash adecuados para almacenar passwords. Hablaremos un poco de los m√°s usados y los m√°s modernos: pbkdf2, bcrypt, scrypt y ARGON2.

          ‚¨á‚¨á‚¨á
      - text: |
          ¬øQu√© caracter√≠sticas extras debe tener?

          1) Costoso en tiempo de procesamiento üí∏
          2) Reducir las posibilidades de que se use mal ya que el espacio de passwords posibles es muy peque√±o üî°
          3) Resistente a ataques de hardware (optimizaciones de memoria y cpu)
      - text: |
          Al guardar un password deber√≠as evitar:

            ‚ùå Guardar en texto plano
            ‚ùå Guardar sin sal
            ‚ùå Usar mal la sal
            ‚ùå Usar un hash demasiado r√°pido
      - text: |
          Este art√≠culo (un poco viejo) explica 4 formas incorrectas de guardar un password y una forma correcta: http://cs.wellesley.edu/~cs304/lectures/bcrypt/dustwell.html
          La forma m√°s segura de hacerlo es usar un algoritmo dise√±ado para guardar passwords. Hablemos de ellos.
      - text: |
          pbkdf2 es un funci√≥n hash que permite configurar:

          - La funci√≥n de hash a usar para generar un MAC (Ej. SHA-1 o SHA-256)
          - El esfuerzo computacional (n√∫mero de veces a ejecutar la funci√≥n principal)
          - Sal
          - Longitud del hash
      - text: |
          pbkdf2 no es resistente a ataques con hardware como arreglos de FPGA's o ASIC, ya que es f√°cilmente paralelizable. No se recomienda su uso para nuevos proyectos y sobre todo si alguien tendr√≠a incentivos fuertes para romper la seguridad de tus passwords.
      - text: |
          bcrypt:

          - Pensado para ser configurable en cuanto al esfuerzo requerido.
          - A√±ade autom√°ticamente sal como parte del cifrado final
          - Inicialmente es ~10,000 veces m√°s lento que SHA1
      - text: |
          bcrypt sigue siendo lo suficientemente seguro para usarlo sin miedo porque no ha sido atacado por las configuraciones espec√≠ficas de FPGA, aunque ya se public√≥ un paper que da la pauta para lograrlo de manera no tan cara. As√≠ que tambi√©n debes usarlo con precauci√≥n.
      - text: |
          scrypt es una funci√≥n pensada para hacer uso intensivo de la memoria para poder ser resistente a ataques con hardware como los FPGA's y los ASIC's. Permite configurar:

          - Iteraciones
          - Tama√±o de bloque
          - Factor de paralelismo
          - Sal
          - Tama√±o de resultado
      - text: |
          scrypt es una apuesta m√°s segura para desarrollos m√°s actuales por sus garant√≠as en cuanto a resistencia a ataques de hardaware, si puedes usarla f√°cilmente, es mejor opci√≥n. El paper en el que est√° basada: https://www.tarsnap.com/scrypt/scrypt.pdf
      - text: |
          ARGON2 (paper: https://www.password-hashing.net/argon2-specs.pdf) es una funci√≥n de reciente creaci√≥n, ganadora en 2015 del Password Hashing Competition. Permite las mismas configuraciones b√°sicamente que scrypt.
      - text: |
          ARGON2 es m√°s resistente con las mismas configuraciones que bcrypt, scrypt y pbkdf2 y est√° pensada espec√≠ficamente para ser resistente a ataques de hardware. Su funci√≥n de hashing principal es BLAKE2 creada por el buen JP Aumasson(@veorq).
      - text: |
          ARGON2 tiene tres variantes:

          - ARGON 2d -> Resistente a ataques de GPU, pero con posibles ataques side-channel
          - ARGON 2i -> Resistente a ataques side-channel, pero menos resistente a ataques de GPU
          - ARGON 2di -> Un versi√≥n h√≠brida resistente a ambas cosas
      - text: |
          Puedes aprender m√°s de ARGON2 y probarla: https://argon2.online/
          Y tambi√©n puedes aprender m√°s acerca del PHC aqu√≠: https://eprint.iacr.org/2016/104.pdf
      - text: |
          CONCLUSI√ìN: siempre que puedas usa ARGON2 como tu funci√≥n de hashing de passwords, que ofrece las garant√≠as m√°s avanzadas. Todos los lenguajes populares tienen su implementaci√≥n y puedes configurar tu framework favorito para trabajar con √©l.