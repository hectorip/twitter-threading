thread:
  tweets:
    - text: |
        ¬øHas escuchado cu√°nto se escandalizan los devs cuando otro dice que us√≥ MD5? Aunque MD5 sigue sin ser "reversible" te√≥ricamente, mi investigaci√≥n sobre los Rainbow Tables y el mal uso de MD5 puede aclararte por qu√© es tan mala idea usarlo para guardar passwords.
        üëá
    - text: |
        La primera cosa que tiene de 'malo' MD5 (y tambi√©n las familias SHA-1, SHA-2 y SHA-3) es que est√°n pensados para ser r√°pidos. Una computadora con un buen GPU puede hacer miles de millones de hashes por segundo.
    - text: |
        Si alguien tiene un hash, que sabe que pertenece a una cadena de texto corta (como un password), tiene m√∫ltiples formas de atacarlo de maneras m√°s efectivas que la fuerza bruta, aunque incluso la fuerza bruta puede ser efectiva.
    - text: |
        Aqu√≠ es donde entran las "Tablas arco√≠ris" (l√©ase con acento espa√±ol). Las Rainbow Tables fueron definidas en este paper: https://lasec.epfl.ch/pub/lasec/doc/Oech03.pdf, y se pensaron como una forma de ayudar a romper secretos criptogr√°ficos. ¬øPor qu√© se necesitan?
    - text: |
        La forma ideal de romper un hash ser√≠a aprovechando una de sus propiedades: siempre devuelven el mismo hash para cierto texto plano. As√≠, te√≥ricamente se podr√≠a crear un √≠ndice con todos los hashes posibles y un texto que sea una preimagen de este hash.
    - text: |
        Algo imposible pr√°cticamente: teniendo 2^128 entradas y suponiendo que cada entrada ocupe 32 bytes, tendr√≠amos 9007199254740992 YottaBytes, la unidad de almacenamiento m√°s grande con nombre: https://simple.wikipedia.org/wiki/Yottabyte
    - text: |
        Pero para romper ciertos sistemas, no necesitamos todos lo hashes posibles, sino todos los hashes de los valores posibles √∫nicamente. Es decir, en el caso de guardado de contrase√±as se reduce dr√°sticamente el espacio de valores que se tienen que guardar.
    - text: |
        A√∫n as√≠, en algunos casos es imposible guardar el espacio completo, sobre todo si un sistema permite un espacio de car√°cteres amplio o llaves grandes. Aqu√≠ es donde entraron las Rainbow Tables, como una manera de hacer un intercambio entre memoria y procesamiento.
    - text: |
        Los Rainbow Tables son una manera de guardar s√≥lamente algunos valores como marcadores de la posibilidad de que un texto plano est√© en cierta cadena precalculada de valores, usando una funci√≥n de reducci√≥n.
    - text: |
        Actualmente las RT han ca√≠do un poco en desuso debido a dos razones principales: 1) La capacidad de almacenamiento y c√≥mputo han aumentado much√≠simo y 2) Son f√°ciles de evitar con un buen sistema de almacenamiento de passwords.
    - text: |
        Las RT's son completamente evitables con passwords salados o claves saladas. Esto significa a√±adir un valor aleatorio (sal o salt) al valor original antes de hashearlo, haciendo el espacio de valores planos casi infinito e impr√°ctico de atacar con tablas precalculadas.
    - text: |
        En la actualidad, debido al poder de c√≥mputo y almacenamiento existente, se requiere que siempre, siempre se "salen" los passwords, porque el no hacerlo es lo que llevo a MD5 y los otros algoritmos de hash a ser tan vulnerables para guardar passwords.
    - text: |
        Esto es tan necesario que hay algoritmos que salan los passwords siempre y que adem√°s intencionalmente son "lentos" para evitar que se prueben muchos textos planos en poco tiempo. Algunos ejemplos: bcrypt, pbkdf2, scrypt y ARGON2, de los que platicaremos despu√©s.
